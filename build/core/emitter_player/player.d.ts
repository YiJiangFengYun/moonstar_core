/// <reference types="gl-matrix" />
import * as common from "../common";
import * as particleMod from "../particle";
import * as psDataMod from "../ps_data";
import { EmitterPlayerInfo } from "./info";
export declare class EmitterPlayer extends common.Player {
    root: boolean;
    psData: psDataMod.PSData;
    particles: particleMod.Particle[];
    particleCount: number;
    players: EmitterPlayer[];
    playerCount: number;
    bounds: common.Bounds;
    globalBounds: common.Bounds;
    private _position;
    private _rotation;
    emitted: boolean;
    emitComplete: boolean;
    completed: boolean;
    private _maxParticleCount;
    private _globalPositionHelper;
    private _id;
    constructor(psData: psDataMod.PSData);
    get id(): number;
    init(info: EmitterPlayerInfo, root: boolean): void;
    get maxParticleCount(): number;
    stop(): void;
    addPlayer(player: EmitterPlayer): void;
    startEmit(): void;
    endEmit(): void;
    checkComplete(): boolean;
    complete(): void;
    get position(): import("gl-matrix").vec2;
    get rotation(): number;
    setPosition(value: common.Vector): void;
    createParticle(pos?: common.Vector): particleMod.Particle;
    deleteParticle(particle: particleMod.Particle): boolean;
    protected _reset(): void;
    private _prepareParticles;
    private _updateGlobalBounds;
    private _updateGlobalPosition;
    private _onPSDataChangePos;
}
